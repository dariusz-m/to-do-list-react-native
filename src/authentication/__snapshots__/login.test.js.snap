// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Auth test Login component renders correctly with error message 1`] = `
<View
  style={
    Object {
      "textAlign": "center",
    }
  }
>
  <Text
    style={
      Object {
        "fontSize": 40,
        "fontWeight": "bold",
      }
    }
  >
    Sign In
  </Text>
  <View>
    <Text
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Username: 
    </Text>
    <TextInput
      allowFontScaling={true}
      autoCorrect={true}
      onChangeText={[Function]}
      placeholder="username..."
      secureTextEntry={false}
      style={
        Object {
          "borderColor": "black",
          "borderWidth": 0.2,
          "height": 40,
        }
      }
      underlineColorAndroid="transparent"
      value=""
    />
  </View>
  <View>
    <Text
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Password: 
    </Text>
    <TextInput
      allowFontScaling={true}
      autoCorrect={true}
      onChangeText={[Function]}
      placeholder="password..."
      secureTextEntry={true}
      style={
        Object {
          "borderColor": "black",
          "borderWidth": 0.2,
          "height": 40,
        }
      }
      underlineColorAndroid="transparent"
      value=""
    />
  </View>
  <View
    accessibilityComponentType="button"
    accessibilityTraits={
      Array [
        "button",
      ]
    }
    accessible={true}
    isTVSelectable={true}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          Object {},
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "color": "#007AFF",
              "fontSize": 18,
              "padding": 8,
              "textAlign": "center",
            },
            Object {
              "color": "blue",
            },
          ]
        }
      >
        Sign in
      </Text>
    </View>
  </View>
  <Text
    style={
      Object {
        "color": "red",
        "textAlign": "center",
      }
    }
  >
    <Text>
      Login failed!
      

    </Text>
    <Text>
      Bad credentials
    </Text>
  </Text>
</View>
`;

exports[`Auth test Login component renders correctly without error message 1`] = `
<View
  style={
    Object {
      "textAlign": "center",
    }
  }
>
  <Text
    style={
      Object {
        "fontSize": 40,
        "fontWeight": "bold",
      }
    }
  >
    Sign In
  </Text>
  <View>
    <Text
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Username: 
    </Text>
    <TextInput
      allowFontScaling={true}
      autoCorrect={true}
      onChangeText={[Function]}
      placeholder="username..."
      secureTextEntry={false}
      style={
        Object {
          "borderColor": "black",
          "borderWidth": 0.2,
          "height": 40,
        }
      }
      underlineColorAndroid="transparent"
      value=""
    />
  </View>
  <View>
    <Text
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Password: 
    </Text>
    <TextInput
      allowFontScaling={true}
      autoCorrect={true}
      onChangeText={[Function]}
      placeholder="password..."
      secureTextEntry={true}
      style={
        Object {
          "borderColor": "black",
          "borderWidth": 0.2,
          "height": 40,
        }
      }
      underlineColorAndroid="transparent"
      value=""
    />
  </View>
  <View
    accessibilityComponentType="button"
    accessibilityTraits={
      Array [
        "button",
      ]
    }
    accessible={true}
    isTVSelectable={true}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          Object {},
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "color": "#007AFF",
              "fontSize": 18,
              "padding": 8,
              "textAlign": "center",
            },
            Object {
              "color": "blue",
            },
          ]
        }
      >
        Sign in
      </Text>
    </View>
  </View>
</View>
`;
